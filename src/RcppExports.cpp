// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vec1
bool vec1(arma::mat x, int n);
RcppExport SEXP _Gaussianst_vec1(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vec1(x, n));
    return rcpp_result_gen;
END_RCPP
}
// exponential_cov
arma::mat exponential_cov(arma::vec x, arma::vec y, List params);
RcppExport SEXP _Gaussianst_exponential_cov(SEXP xSEXP, SEXP ySEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(exponential_cov(x, y, params));
    return rcpp_result_gen;
END_RCPP
}
// Gaussian_kernel
arma::mat Gaussian_kernel(arma::mat x, arma::mat y, double kernel_width);
RcppExport SEXP _Gaussianst_Gaussian_kernel(SEXP xSEXP, SEXP ySEXP, SEXP kernel_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type kernel_width(kernel_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(Gaussian_kernel(x, y, kernel_width));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Gaussianst_vec1", (DL_FUNC) &_Gaussianst_vec1, 2},
    {"_Gaussianst_exponential_cov", (DL_FUNC) &_Gaussianst_exponential_cov, 3},
    {"_Gaussianst_Gaussian_kernel", (DL_FUNC) &_Gaussianst_Gaussian_kernel, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Gaussianst(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
